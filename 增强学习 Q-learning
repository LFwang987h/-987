import gym

env = gym.make("Taxi-v2").env

 

 

import random

from IPython.display import clear_output

 

import numpy as np

q_table = np.zeros([env.observation_space.n, env.action_space.n])

 

# 超参数

alpha = 0.1

gamma = 0.6

epsilon = 0.1

 

# 策划指标

all_epochs = []

all_penalties = []

 

for i in range(1, 100001):

    state = env.reset()

 

    epochs, penalties, reward, = 0, 0, 0

    done = False

   

    while not done:

        if random.uniform(0, 1) < epsilon:

            action = env.action_space.sample() # 探索行动空间

        else:

            action = np.argmax(q_table[state]) # 利用学到的经验

 

        next_state, reward, done, info = env.step(action)

       

        old_value = q_table[state, action]

        next_max = np.max(q_table[next_state])

       

        new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)

        q_table[state, action] = new_value

 

        if reward == -10:

            penalties += 1

 

        state = next_state

        epochs += 1

       

    if i % 100 == 0:

        clear_output(wait=True)

        print(f"Episode: {i}")

 

print("Training finished.\n")

 

 

q_table[328]

 

 

#评估Q_learn后的性能

total_epochs, total_penalties = 0, 0

episodes = 100

 

for _ in range(episodes):

    state = env.reset()

    epochs, penalties, reward = 0, 0, 0 #分别等于0

   

    done = False

   

    while not done:

        action = np.argmax(q_table[state])

        state, reward, done, info = env.step(action)

 

        if reward == -10:

            penalties += 1

       

        epochs += 1

 

    total_penalties += penalties

    total_epochs += epochs

 

print(f"Results after {episodes} episodes:")

print(f"Average timesteps per episode: {total_epochs / episodes}")

print(f"Average penalties per episode: {total_penalties / episodes}")
